{"ast":null,"code":"import { colors } from \"../theme\";\nexport const getTextInputColor = ({\n  value,\n  error,\n  isFocused,\n  withError = true\n}) => {\n  if (!value) return colors.gray;\n  if (!isFocused) return colors.gray;\n  if (withError && error) return colors.error;\n  return colors.primary;\n};","map":{"version":3,"names":["colors","getTextInputColor","value","error","isFocused","withError","gray","primary"],"sources":["/Users/niteshnamdev/Desktop/work/menkes-app/src/utils/utils.ts"],"sourcesContent":["import { colors } from \"@/theme\";\n\ntype TextInputColorParams = {\n  value: number | string;\n  error: boolean;\n  isFocused: boolean;\n  withError?: boolean;\n};\n\n/**\n * Determines the color for a TextInput based on its state.\n * \n * @param params - Object containing state flags.\n * @param params.withError - Indicates if the TextInput should show an error state.\n * @param params.error - Indicates if there is an error in the TextInput.\n * @param params.isFocused - Indicates if the TextInput is currently focused.\n * @returns A string representing the color to be applied to the TextInput.\n */\nexport const getTextInputColor = ({\n  value,\n  error,\n  isFocused,\n  withError = true\n  }: TextInputColorParams): string => {\n    \n    if(!value) return colors.gray;\n  if (!isFocused) return colors.gray;\n  if (withError && error) return colors.error;\n  \n\n  return colors.primary;\n};\n"],"mappings":"AAAA,SAASA,MAAM;AAkBf,OAAO,MAAMC,iBAAiB,GAAGA,CAAC;EAChCC,KAAK;EACLC,KAAK;EACLC,SAAS;EACTC,SAAS,GAAG;AACU,CAAC,KAAa;EAElC,IAAG,CAACH,KAAK,EAAE,OAAOF,MAAM,CAACM,IAAI;EAC/B,IAAI,CAACF,SAAS,EAAE,OAAOJ,MAAM,CAACM,IAAI;EAClC,IAAID,SAAS,IAAIF,KAAK,EAAE,OAAOH,MAAM,CAACG,KAAK;EAG3C,OAAOH,MAAM,CAACO,OAAO;AACvB,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}