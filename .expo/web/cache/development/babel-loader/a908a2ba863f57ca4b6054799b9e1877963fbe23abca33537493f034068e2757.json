{"ast":null,"code":"var _jsxFileName = \"/Users/niteshnamdev/Desktop/work/menkes-app/src/components/input/InputText.tsx\";\nimport React, { useRef, useState } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Icon from \"react-native-vector-icons/MaterialIcons\";\nimport AlertIcon from \"react-native-vector-icons/Ionicons\";\nimport { colors } from \"../../theme\";\nimport { getTextInputColor } from \"../../utils/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimatedTextInput = ({\n  onPress = () => {},\n  editable = true,\n  label,\n  value,\n  onChangeText,\n  keyboardType = \"default\",\n  secureTextEntry = false,\n  autoCapitalize = \"none\",\n  withError = false,\n  error = false,\n  apiFailed = false\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  const animatedLabelPosition = useRef(new Animated.Value(value ? 1 : 0)).current;\n  const inputRef = useRef(null);\n  const handleFocus = () => {\n    setIsFocused(true);\n    animateLabel(1);\n  };\n  const handleBlur = () => {\n    setIsFocused(false);\n    if (!value) {\n      animateLabel(0);\n    }\n  };\n  const animateLabel = toValue => {\n    Animated.timing(animatedLabelPosition, {\n      toValue,\n      duration: 200,\n      useNativeDriver: false\n    }).start();\n  };\n  const togglePasswordVisibility = () => {\n    setIsPasswordVisible(!isPasswordVisible);\n  };\n  const labelStyle = {\n    top: animatedLabelPosition.interpolate({\n      inputRange: [0, 1],\n      outputRange: [26, 8]\n    }),\n    fontSize: animatedLabelPosition.interpolate({\n      inputRange: [0, 1],\n      outputRange: [16, 12]\n    }),\n    color: getTextInputColor({\n      value,\n      error,\n      isFocused\n    })\n  };\n  return _jsxDEV(TouchableWithoutFeedback, {\n    onPress: () => inputRef.current?.focus(),\n    children: _jsxDEV(View, {\n      style: [styles.inputContainer, {\n        borderColor: getTextInputColor({\n          value,\n          error,\n          isFocused,\n          withError\n        })\n      }],\n      children: [_jsxDEV(Animated.Text, {\n        style: [styles.floatingLabel, labelStyle],\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.row,\n        children: [_jsxDEV(TextInput, {\n          ref: inputRef,\n          style: [styles.input],\n          value: value,\n          onChangeText: onChangeText,\n          onFocus: handleFocus,\n          onBlur: handleBlur,\n          keyboardType: keyboardType,\n          secureTextEntry: secureTextEntry && !isPasswordVisible,\n          autoCapitalize: autoCapitalize,\n          editable: editable,\n          onPress: onPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), apiFailed ? _jsxDEV(AlertIcon, {\n          name: \"alert-circle\",\n          size: 16,\n          color: getTextInputColor({\n            value,\n            error,\n            isFocused\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this) : secureTextEntry && _jsxDEV(TouchableOpacity, {\n          onPress: togglePasswordVisibility,\n          style: styles.iconContainer,\n          children: _jsxDEV(Icon, {\n            name: isPasswordVisible ? \"visibility\" : \"visibility-off\",\n            size: 20,\n            color: colors.gray\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  inputContainer: {\n    position: \"relative\",\n    backgroundColor: \"#fff\",\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: colors.formBackground,\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    marginBottom: 14\n  },\n  row: {\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  },\n  input: {\n    flex: 1,\n    height: 40,\n    marginTop: 8,\n    fontSize: 16,\n    color: colors.black\n  },\n  floatingLabel: {\n    position: \"absolute\",\n    left: 8,\n    zIndex: 1,\n    backgroundColor: \"#fff\",\n    paddingHorizontal: 4\n  },\n  inputFocused: {\n    borderColor: colors.primary\n  },\n  iconContainer: {\n    marginLeft: 8\n  }\n});\nexport default AnimatedTextInput;","map":{"version":3,"names":["React","useRef","useState","Animated","TextInput","StyleSheet","View","TouchableWithoutFeedback","TouchableOpacity","Icon","AlertIcon","colors","getTextInputColor","jsxDEV","_jsxDEV","AnimatedTextInput","onPress","editable","label","value","onChangeText","keyboardType","secureTextEntry","autoCapitalize","withError","error","apiFailed","isFocused","setIsFocused","isPasswordVisible","setIsPasswordVisible","animatedLabelPosition","Value","current","inputRef","handleFocus","animateLabel","handleBlur","toValue","timing","duration","useNativeDriver","start","togglePasswordVisibility","labelStyle","top","interpolate","inputRange","outputRange","fontSize","color","focus","children","style","styles","inputContainer","borderColor","Text","floatingLabel","fileName","_jsxFileName","lineNumber","columnNumber","row","ref","input","onFocus","onBlur","name","size","iconContainer","gray","create","position","backgroundColor","borderRadius","borderWidth","formBackground","paddingHorizontal","paddingVertical","marginBottom","flexDirection","alignItems","flex","height","marginTop","black","left","zIndex","inputFocused","primary","marginLeft"],"sources":["/Users/niteshnamdev/Desktop/work/menkes-app/src/components/input/InputText.tsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport {\n  Animated,\n  TextInput,\n  Text,\n  StyleSheet,\n  View,\n  TouchableWithoutFeedback,\n  TouchableOpacity,\n} from \"react-native\";\nimport Icon from \"react-native-vector-icons/MaterialIcons\";\nimport AlertIcon from \"react-native-vector-icons/Ionicons\";\nimport { colors } from \"@/theme\";\nimport { getTextInputColor } from \"@/utils/utils\";\n\n// Define the type for the props\ninterface AnimatedTextInputProps {\n  label: string;\n  value: string;\n  onChangeText: (text: any) => void;\n  onPress?: () => void;\n  editable?: boolean;\n  keyboardType?: \"default\" | \"email-address\" | \"numeric\" | \"phone-pad\";\n  secureTextEntry?: boolean;\n  autoCapitalize?: \"none\" | \"sentences\" | \"words\" | \"characters\";\n  withError?: boolean;\n  error?: boolean;\n  apiFailed?: boolean;\n}\n\nconst AnimatedTextInput: React.FC<AnimatedTextInputProps> = ({\n  onPress = () => {},\n  editable = true,\n  label,\n  value,\n  onChangeText,\n  keyboardType = \"default\",\n  secureTextEntry = false,\n  autoCapitalize = \"none\",\n  withError = false,\n  error = false,\n  apiFailed = false,\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  const animatedLabelPosition = useRef(\n    new Animated.Value(value ? 1 : 0)\n  ).current;\n  const inputRef = useRef<TextInput>(null);\n\n  const handleFocus = () => {\n    setIsFocused(true);\n    animateLabel(1);\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n    if (!value) {\n      animateLabel(0);\n    }\n  };\n\n  const animateLabel = (toValue: number) => {\n    Animated.timing(animatedLabelPosition, {\n      toValue,\n      duration: 200,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  const togglePasswordVisibility = () => {\n    setIsPasswordVisible(!isPasswordVisible);\n  };\n\n  const labelStyle = {\n    top: animatedLabelPosition.interpolate({\n      inputRange: [0, 1],\n      outputRange: [26, 8],\n    }),\n    fontSize: animatedLabelPosition.interpolate({\n      inputRange: [0, 1],\n      outputRange: [16, 12],\n    }),\n    color: getTextInputColor({ value, error, isFocused }),\n  };\n\n  return (\n    <TouchableWithoutFeedback onPress={() => inputRef.current?.focus()}>\n      <View\n        style={[\n          styles.inputContainer,\n          {\n            borderColor: getTextInputColor({\n              value,\n              error,\n              isFocused,\n              withError,\n            }),\n          },\n        ]}\n      >\n        <Animated.Text style={[styles.floatingLabel, labelStyle]}>\n          {label}\n        </Animated.Text>\n        <View style={styles.row}>\n          <TextInput\n            ref={inputRef}\n            style={[styles.input]}\n            value={value}\n            onChangeText={onChangeText}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            keyboardType={keyboardType}\n            secureTextEntry={secureTextEntry && !isPasswordVisible}\n            autoCapitalize={autoCapitalize}\n            editable={editable}\n            onPress={onPress}\n          />\n\n          {apiFailed ? (\n            <AlertIcon\n              name={\"alert-circle\"}\n              size={16}\n              color={getTextInputColor({\n                value,\n                error,\n                isFocused,\n              })} // Explicitly use the error color for weak passwords\n            />\n          ) : (\n            secureTextEntry && (\n              <TouchableOpacity\n                onPress={togglePasswordVisibility}\n                style={styles.iconContainer}\n              >\n                <Icon\n                  name={isPasswordVisible ? \"visibility\" : \"visibility-off\"}\n                  size={20}\n                  color={colors.gray}\n                />\n              </TouchableOpacity>\n            )\n          )}\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nconst styles = StyleSheet.create({\n  inputContainer: {\n    position: \"relative\",\n    backgroundColor: \"#fff\",\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: colors.formBackground,\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    marginBottom: 14,\n  },\n  row: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  input: {\n    flex: 1,\n    height: 40,\n    marginTop: 8,\n    fontSize: 16,\n    color: colors.black,\n  },\n  floatingLabel: {\n    position: \"absolute\",\n    left: 8,\n    zIndex: 1,\n    backgroundColor: \"#fff\",\n    paddingHorizontal: 4,\n  },\n  inputFocused: {\n    borderColor: colors.primary,\n  },\n  iconContainer: {\n    marginLeft: 8,\n  },\n});\n\nexport default AnimatedTextInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}