{"ast":null,"code":"import { UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport ExpoLocalAuthentication from \"./ExpoLocalAuthentication\";\nimport { AuthenticationType, SecurityLevel } from \"./LocalAuthentication.types\";\nexport { AuthenticationType, SecurityLevel };\nexport async function hasHardwareAsync() {\n  if (!ExpoLocalAuthentication.hasHardwareAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n  }\n  return await ExpoLocalAuthentication.hasHardwareAsync();\n}\nexport async function supportedAuthenticationTypesAsync() {\n  if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n  }\n  return await ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n}\nexport async function isEnrolledAsync() {\n  if (!ExpoLocalAuthentication.isEnrolledAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n  }\n  return await ExpoLocalAuthentication.isEnrolledAsync();\n}\nexport async function getEnrolledLevelAsync() {\n  if (!ExpoLocalAuthentication.getEnrolledLevelAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'getEnrolledLevelAsync');\n  }\n  return await ExpoLocalAuthentication.getEnrolledLevelAsync();\n}\nexport async function authenticateAsync(options = {}) {\n  if (!ExpoLocalAuthentication.authenticateAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n  }\n  if (options.hasOwnProperty('promptMessage')) {\n    invariant(typeof options.promptMessage === 'string' && options.promptMessage.length, 'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.');\n  }\n  const promptMessage = options.promptMessage || 'Authenticate';\n  const cancelLabel = options.cancelLabel || 'Cancel';\n  const result = await ExpoLocalAuthentication.authenticateAsync(Object.assign({}, options, {\n    promptMessage,\n    cancelLabel\n  }));\n  return result;\n}\nexport async function cancelAuthenticate() {\n  if (!ExpoLocalAuthentication.cancelAuthenticate) {\n    throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n  }\n  await ExpoLocalAuthentication.cancelAuthenticate();\n}","map":{"version":3,"names":["UnavailabilityError","invariant","ExpoLocalAuthentication","AuthenticationType","SecurityLevel","hasHardwareAsync","supportedAuthenticationTypesAsync","isEnrolledAsync","getEnrolledLevelAsync","authenticateAsync","options","hasOwnProperty","promptMessage","length","cancelLabel","result","Object","assign","cancelAuthenticate"],"sources":["/Users/niteshnamdev/Desktop/work/menkes-app/node_modules/expo-local-authentication/src/LocalAuthentication.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport ExpoLocalAuthentication from './ExpoLocalAuthentication';\nimport {\n  LocalAuthenticationOptions,\n  AuthenticationType,\n  LocalAuthenticationResult,\n  SecurityLevel,\n  BiometricsSecurityLevel,\n} from './LocalAuthentication.types';\n\nexport {\n  LocalAuthenticationOptions,\n  AuthenticationType,\n  LocalAuthenticationResult,\n  SecurityLevel,\n  BiometricsSecurityLevel,\n};\n\n// @needsAudit\n/**\n * Determine whether a face or fingerprint scanner is available on the device.\n * @return Returns a promise which fulfils with a `boolean` value indicating whether a face or\n * fingerprint scanner is available on this device.\n */\nexport async function hasHardwareAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.hasHardwareAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n  }\n  return await ExpoLocalAuthentication.hasHardwareAsync();\n}\n\n// @needsAudit\n/**\n * Determine what kinds of authentications are available on the device.\n * @return Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).\n *\n * Devices can support multiple authentication methods- i.e. `[1,2]` means the device supports both\n * fingerprint and facial recognition. If none are supported, this method returns an empty array.\n */\nexport async function supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n  if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n  }\n  return await ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n}\n\n// @needsAudit\n/**\n * Determine whether the device has saved fingerprints or facial data to use for authentication.\n * @return Returns a promise which fulfils to `boolean` value indicating whether the device has\n * saved fingerprints or facial data for authentication.\n */\nexport async function isEnrolledAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.isEnrolledAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n  }\n  return await ExpoLocalAuthentication.isEnrolledAsync();\n}\n\n// @needsAudit\n/**\n * Determine what kind of authentication is enrolled on the device.\n * @return Returns a promise which fulfils with [`SecurityLevel`](#securitylevel).\n * > **Note:** On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been\n * enrolled, which is not the method that [`authenticateAsync`](#localauthenticationauthenticateasyncoptions)\n * prompts.\n */\nexport async function getEnrolledLevelAsync(): Promise<SecurityLevel> {\n  if (!ExpoLocalAuthentication.getEnrolledLevelAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'getEnrolledLevelAsync');\n  }\n  return await ExpoLocalAuthentication.getEnrolledLevelAsync();\n}\n\n// @needsAudit\n/**\n * Attempts to authenticate via Fingerprint/TouchID (or FaceID if available on the device).\n * > **Note:** Apple requires apps which use FaceID to provide a description of why they use this API.\n * If you try to use FaceID on an iPhone with FaceID without providing `infoPlist.NSFaceIDUsageDescription`\n * in `app.json`, the module will authenticate using device passcode. For more information about\n * usage descriptions on iOS, see [permissions guide](/guides/permissions/#ios).\n * @param options\n * @return Returns a promise which fulfils with [`LocalAuthenticationResult`](#localauthenticationresult).\n */\nexport async function authenticateAsync(\n  options: LocalAuthenticationOptions = {}\n): Promise<LocalAuthenticationResult> {\n  if (!ExpoLocalAuthentication.authenticateAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n  }\n\n  if (options.hasOwnProperty('promptMessage')) {\n    invariant(\n      typeof options.promptMessage === 'string' && options.promptMessage.length,\n      'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.'\n    );\n  }\n\n  const promptMessage = options.promptMessage || 'Authenticate';\n  const cancelLabel = options.cancelLabel || 'Cancel';\n  const result = await ExpoLocalAuthentication.authenticateAsync({\n    ...options,\n    promptMessage,\n    cancelLabel,\n  });\n\n  return result;\n}\n\n// @needsAudit\n/**\n * Cancels authentication flow.\n * @platform android\n */\nexport async function cancelAuthenticate(): Promise<void> {\n  if (!ExpoLocalAuthentication.cancelAuthenticate) {\n    throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n  }\n  await ExpoLocalAuthentication.cancelAuthenticate();\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AACvD,OAAOC,SAAS,MAAM,WAAW;AAEjC,OAAOC,uBAAuB;AAC9B,SAEEC,kBAAkB,EAElBC,aAAa;AAIf,SAEED,kBAAkB,EAElBC,aAAa;AAUf,OAAO,eAAeC,gBAAgBA,CAAA;EACpC,IAAI,CAACH,uBAAuB,CAACG,gBAAgB,EAAE;IAC7C,MAAM,IAAIL,mBAAmB,CAAC,2BAA2B,EAAE,kBAAkB,CAAC;;EAEhF,OAAO,MAAME,uBAAuB,CAACG,gBAAgB,EAAE;AACzD;AAUA,OAAO,eAAeC,iCAAiCA,CAAA;EACrD,IAAI,CAACJ,uBAAuB,CAACI,iCAAiC,EAAE;IAC9D,MAAM,IAAIN,mBAAmB,CAAC,2BAA2B,EAAE,mCAAmC,CAAC;;EAEjG,OAAO,MAAME,uBAAuB,CAACI,iCAAiC,EAAE;AAC1E;AAQA,OAAO,eAAeC,eAAeA,CAAA;EACnC,IAAI,CAACL,uBAAuB,CAACK,eAAe,EAAE;IAC5C,MAAM,IAAIP,mBAAmB,CAAC,2BAA2B,EAAE,iBAAiB,CAAC;;EAE/E,OAAO,MAAME,uBAAuB,CAACK,eAAe,EAAE;AACxD;AAUA,OAAO,eAAeC,qBAAqBA,CAAA;EACzC,IAAI,CAACN,uBAAuB,CAACM,qBAAqB,EAAE;IAClD,MAAM,IAAIR,mBAAmB,CAAC,2BAA2B,EAAE,uBAAuB,CAAC;;EAErF,OAAO,MAAME,uBAAuB,CAACM,qBAAqB,EAAE;AAC9D;AAYA,OAAO,eAAeC,iBAAiBA,CACrCC,OAAA,GAAsC,EAAE;EAExC,IAAI,CAACR,uBAAuB,CAACO,iBAAiB,EAAE;IAC9C,MAAM,IAAIT,mBAAmB,CAAC,2BAA2B,EAAE,mBAAmB,CAAC;;EAGjF,IAAIU,OAAO,CAACC,cAAc,CAAC,eAAe,CAAC,EAAE;IAC3CV,SAAS,CACP,OAAOS,OAAO,CAACE,aAAa,KAAK,QAAQ,IAAIF,OAAO,CAACE,aAAa,CAACC,MAAM,EACzE,6FAA6F,CAC9F;;EAGH,MAAMD,aAAa,GAAGF,OAAO,CAACE,aAAa,IAAI,cAAc;EAC7D,MAAME,WAAW,GAAGJ,OAAO,CAACI,WAAW,IAAI,QAAQ;EACnD,MAAMC,MAAM,GAAG,MAAMb,uBAAuB,CAACO,iBAAiB,CAAAO,MAAA,CAAAC,MAAA,KACzDP,OAAO;IACVE,aAAa;IACbE;EAAW,EACZ,CAAC;EAEF,OAAOC,MAAM;AACf;AAOA,OAAO,eAAeG,kBAAkBA,CAAA;EACtC,IAAI,CAAChB,uBAAuB,CAACgB,kBAAkB,EAAE;IAC/C,MAAM,IAAIlB,mBAAmB,CAAC,2BAA2B,EAAE,oBAAoB,CAAC;;EAElF,MAAME,uBAAuB,CAACgB,kBAAkB,EAAE;AACpD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}