{"ast":null,"code":"var _jsxFileName = \"/Users/niteshnamdev/Desktop/work/menkes-app/node_modules/react-native-range-slider-expo/src/RangeSlider.tsx\";\nimport React, { useState, useEffect, memo, useMemo } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { gestureHandlerRootHOC, GestureHandlerRootView, PanGestureHandler, State } from 'react-native-gesture-handler';\nimport KnobBubble from \"./components/KnobBubble\";\nimport useUtils, { osRtl } from \"./components/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SMALL_SIZE = 24;\nconst MEDIUM_SIZE = 34;\nconst LARGE_SIZE = 44;\nconst fontSize = 15;\nconst RangeSlider = memo(({\n  min,\n  max,\n  fromValueOnChange,\n  toValueOnChange,\n  step = 1,\n  styleSize = 'medium',\n  fromKnobColor = '#00a2ff',\n  toKnobColor = '#00a2ff',\n  inRangeBarColor = 'rgb(100,100,100)',\n  outOfRangeBarColor = 'rgb(200,200,200)',\n  valueLabelsBackgroundColor = '#3a4766',\n  rangeLabelsTextColor = 'rgb(60,60,60)',\n  showRangeLabels = true,\n  showValueLabels = true,\n  initialFromValue,\n  initialToValue,\n  knobSize: _knobSize,\n  knobBubbleTextStyle = {},\n  containerStyle: customContainerStyle = {},\n  barHeight: customBarHeight,\n  labelFormatter\n}) => {\n  const [wasInitialized, setWasInitialized] = useState(false);\n  const [knobSize, setknobSize] = useState(0);\n  const [barHeight, setBarHeight] = useState(0);\n  const [stepInPixels, setStepInPixels] = useState(0);\n  const [flexDirection, setFlexDirection] = useState('row');\n  const [fromValueOffset, setFromValueOffset] = useState(0);\n  const [toValueOffset, setToValueOffset] = useState(0);\n  const [sliderWidth, setSliderWidth] = useState(0);\n  const [fromElevation, setFromElevation] = useState(3);\n  const [toElevation, setToElevation] = useState(3);\n  const [translateXfromValue] = useState(new Animated.Value(0));\n  const [translateXtoValue] = useState(new Animated.Value(0));\n  const [fromValueScale] = useState(new Animated.Value(0.01));\n  const [toValueScale] = useState(new Animated.Value(0.01));\n  const [rightBarScaleX] = useState(new Animated.Value(0.01));\n  const [leftBarScaleX] = useState(new Animated.Value(0.01));\n  const toValueTextRef = React.createRef();\n  const fromValueTextRef = React.createRef();\n  const opacity = React.useRef(new Animated.Value(0)).current;\n  const {\n    formatLabel,\n    decimalRound\n  } = useUtils({\n    step,\n    labelFormatter\n  });\n  useEffect(() => {\n    setFlexDirection(osRtl ? 'row-reverse' : 'row');\n  }, [knobSize]);\n  useEffect(() => {\n    if (wasInitialized) {\n      const stepSize = setStepSize(max, min, step);\n      fromValueTextRef.current?.setNativeProps({\n        text: formatLabel(min)\n      });\n      toValueTextRef.current?.setNativeProps({\n        text: formatLabel(min)\n      });\n      if (typeof initialFromValue === 'number' && initialFromValue >= min && initialFromValue <= max) {\n        const offset = (initialFromValue - min) / step * stepSize - knobSize / 2;\n        setFromValueStatic(offset, knobSize, stepSize);\n        setValueText(offset + knobSize, true);\n      }\n      if (typeof initialToValue === 'number' && initialToValue >= min && initialToValue <= max && typeof initialFromValue === 'number' && initialToValue > initialFromValue) {\n        const offset = (initialToValue - min) / step * stepSize - knobSize / 2;\n        setToValueStatic(offset, knobSize, stepSize);\n        setValueText(offset, false);\n      }\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 64,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [min, max, step, initialFromValue, initialToValue, wasInitialized]);\n  useEffect(() => {\n    const sizeBasedOnStyleSize = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n    const size = _knobSize ?? sizeBasedOnStyleSize;\n    setknobSize(customBarHeight ? Math.max(customBarHeight, size) : size);\n    setBarHeight(customBarHeight ?? sizeBasedOnStyleSize / 3);\n    translateXfromValue.setValue(-size / 4);\n  }, [styleSize, customBarHeight]);\n  const setFromValueStatic = (newOffset, knobSize, stepInPixels) => {\n    newOffset = Math.floor((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n    setFromValue(newOffset);\n    setFromValueOffset(newOffset);\n    const changeTo = Math.floor((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n    fromValueOnChange(decimalRound(changeTo));\n  };\n  const setFromValue = newOffset => {\n    translateXfromValue.setValue(newOffset);\n    leftBarScaleX.setValue((newOffset + knobSize / 2) / sliderWidth + 0.01);\n  };\n  const setToValueStatic = (newOffset, knobSize, stepInPixels) => {\n    newOffset = Math.ceil((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n    setToValue(newOffset);\n    setToValueOffset(newOffset);\n    const changeTo = Math.ceil((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n    toValueOnChange(decimalRound(changeTo));\n  };\n  const setToValue = newOffset => {\n    translateXtoValue.setValue(newOffset);\n    rightBarScaleX.setValue(1.01 - (newOffset + knobSize / 2) / sliderWidth);\n  };\n  const setStepSize = (max, min, step) => {\n    const numberOfSteps = (max - min) / step;\n    const stepSize = sliderWidth / numberOfSteps;\n    setStepInPixels(stepSize);\n    return stepSize;\n  };\n  const setValueText = (totalOffset, from = true) => {\n    const isFrom = from && fromValueTextRef != null;\n    const isTo = !from && toValueTextRef != null;\n    if (isFrom || isTo) {\n      const numericValue = Math[isFrom ? 'floor' : 'ceil']((totalOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n      const text = formatLabel(numericValue);\n      (isFrom ? fromValueTextRef : toValueTextRef).current?.setNativeProps({\n        text\n      });\n    }\n  };\n  const onGestureEventFromValue = event => {\n    let totalOffset = event.nativeEvent.translationX + fromValueOffset;\n    if (totalOffset >= -knobSize / 2 && totalOffset < toValueOffset) {\n      translateXfromValue.setValue(totalOffset);\n      setValueText(totalOffset, true);\n      leftBarScaleX.setValue((totalOffset + knobSize / 2) / sliderWidth + 0.01);\n    }\n  };\n  const onHandlerStateChangeFromValue = event => {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(fromValueScale, 1);\n      setElevations(6, 5);\n    }\n    if (event.nativeEvent.state === State.END) {\n      let newOffset = event.nativeEvent.translationX + fromValueOffset;\n      newOffset = Math.floor((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n      if (newOffset < -knobSize / 2) {\n        newOffset = -knobSize / 2;\n      } else if (newOffset >= toValueOffset) {\n        newOffset = toValueOffset - stepInPixels;\n      }\n      setFromValueStatic(newOffset, knobSize, stepInPixels);\n      scaleTo(fromValueScale, 0.01);\n    }\n  };\n  const onGestureEventToValue = event => {\n    const totalOffset = event.nativeEvent.translationX + toValueOffset;\n    if (totalOffset <= sliderWidth - knobSize / 2 && totalOffset > fromValueOffset) {\n      translateXtoValue.setValue(totalOffset);\n      setValueText(totalOffset, false);\n      rightBarScaleX.setValue(1.01 - (totalOffset + knobSize / 2) / sliderWidth);\n    }\n  };\n  const onHandlerStateChangeToValue = event => {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(toValueScale, 1);\n      setElevations(5, 6);\n    }\n    if (event.nativeEvent.state === State.END) {\n      let newOffset = event.nativeEvent.translationX + toValueOffset;\n      newOffset = Math.ceil((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n      if (newOffset > sliderWidth - knobSize / 2) {\n        newOffset = sliderWidth - knobSize / 2;\n      } else if (newOffset <= fromValueOffset) {\n        newOffset = fromValueOffset + stepInPixels;\n      }\n      setToValueOffset(newOffset);\n      translateXtoValue.setValue(newOffset);\n      rightBarScaleX.setValue(1.01 - (newOffset + knobSize / 2) / sliderWidth);\n      scaleTo(toValueScale, 0.01);\n      const changeTo = Math.ceil((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n      toValueOnChange(decimalRound(changeTo));\n    }\n  };\n  const scaleTo = (param, toValue) => Animated.timing(param, {\n    toValue,\n    duration: 150,\n    useNativeDriver: true\n  }).start();\n  const setElevations = (fromValue, toValue) => {\n    setFromElevation(fromValue);\n    setToElevation(toValue);\n  };\n  const onLayout = event => {\n    if (wasInitialized === false) {\n      const {\n        width\n      } = event.nativeEvent.layout;\n      setSliderWidth(width);\n      translateXtoValue.setValue(width - knobSize / 2);\n      setToValueOffset(width - knobSize / 2);\n      setWasInitialized(true);\n    }\n  };\n  const padding = useMemo(() => styleSize === 'large' ? 17 : styleSize === 'medium' ? 24 : 31, [styleSize]);\n  return _jsxDEV(GestureHandlerRootView, {\n    children: _jsxDEV(Animated.View, {\n      style: [styles.container, {\n        opacity,\n        padding\n      }, customContainerStyle],\n      children: [showValueLabels && _jsxDEV(View, {\n        style: {\n          width: '100%',\n          height: 1,\n          flexDirection\n        },\n        children: [_jsxDEV(KnobBubble, {\n          knobSize,\n          valueLabelsBackgroundColor,\n          translateX: translateXfromValue,\n          scale: fromValueScale,\n          textInputRef: fromValueTextRef,\n          textStyle: knobBubbleTextStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), _jsxDEV(KnobBubble, {\n          knobSize,\n          valueLabelsBackgroundColor,\n          translateX: translateXtoValue,\n          scale: toValueScale,\n          textInputRef: toValueTextRef,\n          textStyle: knobBubbleTextStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), _jsxDEV(View, {\n        style: {\n          width: '100%',\n          height: knobSize,\n          marginVertical: 4,\n          position: 'relative',\n          flexDirection,\n          alignItems: 'center'\n        },\n        children: [_jsxDEV(View, {\n          style: {\n            position: 'absolute',\n            backgroundColor: inRangeBarColor,\n            left: knobSize / 4,\n            marginLeft: -knobSize / 4,\n            right: knobSize / 4,\n            height: barHeight\n          },\n          onLayout: onLayout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), _jsxDEV(Animated.View, {\n          style: {\n            position: 'absolute',\n            left: knobSize / 4,\n            marginLeft: -knobSize / 4,\n            right: knobSize / 4,\n            height: barHeight,\n            backgroundColor: outOfRangeBarColor,\n            transform: [{\n              translateX: sliderWidth / 2\n            }, {\n              scaleX: rightBarScaleX\n            }, {\n              translateX: -sliderWidth / 2\n            }]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), _jsxDEV(Animated.View, {\n          style: {\n            position: 'absolute',\n            left: -knobSize / 4,\n            width: knobSize / 2,\n            height: barHeight,\n            borderRadius: barHeight,\n            backgroundColor: outOfRangeBarColor\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), _jsxDEV(Animated.View, {\n          style: {\n            width: sliderWidth,\n            height: barHeight,\n            backgroundColor: outOfRangeBarColor,\n            transform: [{\n              translateX: -sliderWidth / 2\n            }, {\n              scaleX: leftBarScaleX\n            }, {\n              translateX: sliderWidth / 2\n            }]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), _jsxDEV(Animated.View, {\n          style: {\n            position: 'absolute',\n            left: sliderWidth - knobSize / 4,\n            width: knobSize / 2,\n            height: barHeight,\n            borderRadius: barHeight,\n            backgroundColor: outOfRangeBarColor\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), _jsxDEV(PanGestureHandler, {\n          onGestureEvent: onGestureEventFromValue,\n          onHandlerStateChange: onHandlerStateChangeFromValue,\n          children: _jsxDEV(Animated.View, {\n            style: [styles.knob, {\n              height: knobSize,\n              width: knobSize,\n              borderRadius: knobSize,\n              backgroundColor: fromKnobColor,\n              elevation: fromElevation,\n              transform: [{\n                translateX: translateXfromValue\n              }]\n            }]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), _jsxDEV(PanGestureHandler, {\n          onGestureEvent: onGestureEventToValue,\n          onHandlerStateChange: onHandlerStateChangeToValue,\n          children: _jsxDEV(Animated.View, {\n            style: [styles.knob, {\n              height: knobSize,\n              width: knobSize,\n              borderRadius: knobSize,\n              backgroundColor: toKnobColor,\n              elevation: toElevation,\n              transform: [{\n                translateX: translateXtoValue\n              }]\n            }]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), showRangeLabels && _jsxDEV(View, {\n        style: {\n          width: '100%',\n          flexDirection,\n          justifyContent: 'space-between'\n        },\n        children: [_jsxDEV(Text, {\n          style: {\n            color: rangeLabelsTextColor,\n            fontWeight: \"bold\",\n            fontSize\n          },\n          children: min\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), _jsxDEV(Text, {\n          style: {\n            color: rangeLabelsTextColor,\n            fontWeight: \"bold\",\n            fontSize\n          },\n          children: max\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n});\nconst styles = StyleSheet.create({\n  container: {\n    height: 100,\n    width: '100%'\n  },\n  knob: {\n    position: 'absolute',\n    elevation: 4\n  }\n});\nexport default gestureHandlerRootHOC(RangeSlider);","map":{"version":3,"names":["React","useState","useEffect","memo","useMemo","Animated","StyleSheet","View","Text","gestureHandlerRootHOC","GestureHandlerRootView","PanGestureHandler","State","KnobBubble","useUtils","osRtl","jsxDEV","_jsxDEV","SMALL_SIZE","MEDIUM_SIZE","LARGE_SIZE","fontSize","RangeSlider","min","max","fromValueOnChange","toValueOnChange","step","styleSize","fromKnobColor","toKnobColor","inRangeBarColor","outOfRangeBarColor","valueLabelsBackgroundColor","rangeLabelsTextColor","showRangeLabels","showValueLabels","initialFromValue","initialToValue","knobSize","_knobSize","knobBubbleTextStyle","containerStyle","customContainerStyle","barHeight","customBarHeight","labelFormatter","wasInitialized","setWasInitialized","setknobSize","setBarHeight","stepInPixels","setStepInPixels","flexDirection","setFlexDirection","fromValueOffset","setFromValueOffset","toValueOffset","setToValueOffset","sliderWidth","setSliderWidth","fromElevation","setFromElevation","toElevation","setToElevation","translateXfromValue","Value","translateXtoValue","fromValueScale","toValueScale","rightBarScaleX","leftBarScaleX","toValueTextRef","createRef","fromValueTextRef","opacity","useRef","current","formatLabel","decimalRound","stepSize","setStepSize","setNativeProps","text","offset","setFromValueStatic","setValueText","setToValueStatic","timing","toValue","duration","useNativeDriver","start","sizeBasedOnStyleSize","size","Math","setValue","newOffset","floor","setFromValue","changeTo","ceil","setToValue","numberOfSteps","totalOffset","from","isFrom","isTo","numericValue","onGestureEventFromValue","event","nativeEvent","translationX","onHandlerStateChangeFromValue","state","BEGAN","scaleTo","setElevations","END","onGestureEventToValue","onHandlerStateChangeToValue","param","fromValue","onLayout","width","layout","padding","children","style","styles","container","height","translateX","scale","textInputRef","textStyle","fileName","_jsxFileName","lineNumber","columnNumber","marginVertical","position","alignItems","backgroundColor","left","marginLeft","right","transform","scaleX","borderRadius","onGestureEvent","onHandlerStateChange","knob","elevation","justifyContent","color","fontWeight","create"],"sources":["/Users/niteshnamdev/Desktop/work/menkes-app/node_modules/react-native-range-slider-expo/src/RangeSlider.tsx"],"sourcesContent":["import React, { useState, useEffect, memo, useMemo } from 'react';\nimport { Animated, StyleSheet, View, LayoutChangeEvent, Text, TextInput, ViewStyle, TextStyle } from 'react-native';\nimport { gestureHandlerRootHOC, GestureHandlerRootView, PanGestureHandler, PanGestureHandlerGestureEvent, State } from 'react-native-gesture-handler';\nimport KnobBubble from './components/KnobBubble';\nimport useUtils, { osRtl } from './components/utils';\n\nconst SMALL_SIZE = 24;\nconst MEDIUM_SIZE = 34;\nconst LARGE_SIZE = 44;\nconst fontSize = 15;\n\ninterface SliderProps {\n  min: number,\n  max: number,\n  fromValueOnChange: (value: number) => void,\n  toValueOnChange: (value: number) => void,\n  step?: number,\n  styleSize?: 'small' | 'medium' | 'large' | number,\n  fromKnobColor?: string,\n  toKnobColor?: string,\n  inRangeBarColor?: string,\n  outOfRangeBarColor?: string,\n  knobBubbleTextStyle?: TextStyle,\n  valueLabelsBackgroundColor?: string,\n  rangeLabelsTextColor?: string,\n  showRangeLabels?: boolean,\n  showValueLabels?: boolean,\n  initialFromValue?: number,\n  initialToValue?: number,\n  knobSize?: number,\n  containerStyle?: ViewStyle,\n  barHeight?: number,\n  labelFormatter?: (value: number) => string,\n}\n\nconst RangeSlider = memo(({\n  min, max, fromValueOnChange, toValueOnChange,\n  step = 1,\n  styleSize = 'medium',\n  fromKnobColor = '#00a2ff',\n  toKnobColor = '#00a2ff',\n  inRangeBarColor = 'rgb(100,100,100)',\n  outOfRangeBarColor = 'rgb(200,200,200)',\n  valueLabelsBackgroundColor = '#3a4766',\n  rangeLabelsTextColor = 'rgb(60,60,60)',\n  showRangeLabels = true,\n  showValueLabels = true,\n  initialFromValue,\n  initialToValue,\n  knobSize: _knobSize,\n  knobBubbleTextStyle = {},\n  containerStyle: customContainerStyle = {},\n  barHeight: customBarHeight,\n  labelFormatter,\n}: SliderProps) => {\n  \n  // settings\n  const [wasInitialized, setWasInitialized] = useState(false);\n  const [knobSize, setknobSize] = useState(0);\n  const [barHeight, setBarHeight] = useState(0);\n  const [stepInPixels, setStepInPixels] = useState(0);\n\n  // rtl settings\n  const [flexDirection, setFlexDirection] = useState<\"row\" | \"row-reverse\" | \"column\" | \"column-reverse\" | undefined>('row');\n\n  const [fromValueOffset, setFromValueOffset] = useState(0);\n  const [toValueOffset, setToValueOffset] = useState(0);\n  const [sliderWidth, setSliderWidth] = useState(0);\n  const [fromElevation, setFromElevation] = useState(3);\n  const [toElevation, setToElevation] = useState(3);\n\n  // animation values\n  const [translateXfromValue] = useState(new Animated.Value(0));\n  const [translateXtoValue] = useState(new Animated.Value(0));\n  const [fromValueScale] = useState(new Animated.Value(0.01));\n  const [toValueScale] = useState(new Animated.Value(0.01));\n  const [rightBarScaleX] = useState(new Animated.Value(0.01));\n  const [leftBarScaleX] = useState(new Animated.Value(0.01));\n\n  // refs\n  const toValueTextRef = React.createRef<TextInput>();\n  const fromValueTextRef = React.createRef<TextInput>();\n  const opacity = React.useRef<Animated.Value>(new Animated.Value(0)).current;\n  const {formatLabel, decimalRound} = useUtils({step, labelFormatter});\n\n  // initalizing settings\n  useEffect(() => {\n    setFlexDirection(osRtl ? 'row-reverse' : 'row');\n  }, [knobSize]);\n  \n  useEffect(() => {\n    if (wasInitialized) {\n      const stepSize = setStepSize(max, min, step);\n      fromValueTextRef.current?.setNativeProps({ text: formatLabel(min) });\n      toValueTextRef.current?.setNativeProps({ text: formatLabel(min) });\n      if (typeof initialFromValue === 'number' && initialFromValue >= min && initialFromValue <= max) {\n        const offset = ((initialFromValue - min) / step) * stepSize - (knobSize / 2);\n        setFromValueStatic(offset, knobSize, stepSize);\n        setValueText(offset + knobSize, true);\n      }\n      if (typeof initialToValue === 'number' && initialToValue >= min && initialToValue <= max && typeof initialFromValue === 'number' && initialToValue > initialFromValue) {\n        const offset = ((initialToValue - min) / step) * stepSize - (knobSize / 2);\n        setToValueStatic(offset, knobSize, stepSize);\n        setValueText(offset, false);\n      }\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 64,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [min, max, step, initialFromValue, initialToValue, wasInitialized]);\n\n  useEffect(() => {\n    const sizeBasedOnStyleSize = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n    const size = _knobSize ?? sizeBasedOnStyleSize;\n    setknobSize(customBarHeight ? Math.max(customBarHeight, size) : size);\n    setBarHeight(customBarHeight ?? sizeBasedOnStyleSize / 3)\n    translateXfromValue.setValue(-size / 4);\n  }, [styleSize, customBarHeight]);\n  \n  // initalizing settings helpers\n  const setFromValueStatic = (newOffset: number, knobSize: number, stepInPixels: number) => {\n    newOffset = Math.floor((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n    setFromValue(newOffset);\n    setFromValueOffset(newOffset);\n    const changeTo = Math.floor(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n    fromValueOnChange(decimalRound(changeTo));\n  }\n  const setFromValue = (newOffset: number) => {\n    translateXfromValue.setValue(newOffset);\n    leftBarScaleX.setValue((newOffset + (knobSize / 2)) / sliderWidth + 0.01);\n  }\n  const setToValueStatic = (newOffset: number, knobSize: number, stepInPixels: number) => {\n    newOffset = Math.ceil((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n    setToValue(newOffset);\n    setToValueOffset(newOffset);\n    const changeTo = Math.ceil(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n    toValueOnChange(decimalRound(changeTo));\n  }\n  const setToValue = (newOffset: number) => {\n    translateXtoValue.setValue(newOffset);\n    rightBarScaleX.setValue(1.01 - ((newOffset + (knobSize / 2)) / sliderWidth));\n  }\n  const setStepSize = (max: number, min: number, step: number) => {\n    const numberOfSteps = ((max - min) / step);\n    const stepSize = sliderWidth / numberOfSteps;\n    setStepInPixels(stepSize);\n    return stepSize;\n  }\n  const setValueText = (totalOffset: number, from = true) => {\n    const isFrom = from && fromValueTextRef != null;\n    const isTo = !from && toValueTextRef != null;\n    if (isFrom || isTo) {\n      const numericValue: number = Math[isFrom ? 'floor' : 'ceil'](((totalOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n      const text = formatLabel(numericValue);\n      (isFrom ? fromValueTextRef : toValueTextRef).current?.setNativeProps({ text });\n    }\n  }\n\n  // from value gesture events ------------------------------------------------------------------------\n  const onGestureEventFromValue = (event: PanGestureHandlerGestureEvent) => {\n    let totalOffset = event.nativeEvent.translationX + fromValueOffset;\n    if (totalOffset >= -knobSize / 2 && totalOffset < toValueOffset) {\n      translateXfromValue.setValue(totalOffset);\n      setValueText(totalOffset, true);\n      leftBarScaleX.setValue((totalOffset + (knobSize / 2)) / sliderWidth + 0.01);\n    }\n  }\n  const onHandlerStateChangeFromValue = (event: PanGestureHandlerGestureEvent) => {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(fromValueScale, 1);\n      setElevations(6, 5);\n    }\n    if (event.nativeEvent.state === State.END) {\n      let newOffset = event.nativeEvent.translationX + fromValueOffset;\n      newOffset = Math.floor((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n      if (newOffset < -knobSize / 2) {\n        newOffset = -knobSize / 2;\n      } else if (newOffset >= toValueOffset) {\n        newOffset = toValueOffset - stepInPixels;\n      }\n      setFromValueStatic(newOffset, knobSize, stepInPixels)\n      scaleTo(fromValueScale, 0.01);\n    }\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  // to value gesture events ------------------------------------------------------------------------\n  const onGestureEventToValue = (event: PanGestureHandlerGestureEvent) => {\n    const totalOffset = event.nativeEvent.translationX + toValueOffset;\n    if (totalOffset <= sliderWidth - knobSize / 2 && totalOffset > fromValueOffset) {\n      translateXtoValue.setValue(totalOffset);\n      setValueText(totalOffset, false);\n      rightBarScaleX.setValue(1.01 - ((totalOffset + (knobSize / 2)) / sliderWidth));\n    }\n  }\n  const onHandlerStateChangeToValue = (event: PanGestureHandlerGestureEvent) => {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(toValueScale, 1);\n      setElevations(5, 6);\n    }\n    if (event.nativeEvent.state === State.END) {\n      let newOffset = event.nativeEvent.translationX + toValueOffset;\n      newOffset = Math.ceil((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n      if (newOffset > sliderWidth - knobSize / 2) {\n        newOffset = sliderWidth - knobSize / 2;\n      } else if (newOffset <= fromValueOffset) {\n        newOffset = fromValueOffset + stepInPixels;\n      }\n      setToValueOffset(newOffset);\n      translateXtoValue.setValue(newOffset);\n      rightBarScaleX.setValue(1.01 - ((newOffset + (knobSize / 2)) / sliderWidth));\n      scaleTo(toValueScale, 0.01);\n      const changeTo = Math.ceil(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n      toValueOnChange(decimalRound(changeTo));\n    }\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  // gesture events help functions ------------------------------------------------------------------\n  const scaleTo = (param: Animated.Value, toValue: number) => Animated.timing(param, {\n    toValue,\n    duration: 150,\n    useNativeDriver: true\n  }).start();\n\n  const setElevations = (fromValue: number, toValue: number) => {\n    setFromElevation(fromValue);\n    setToElevation(toValue)\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  // setting bar width ------------------------------------------------------------------------------\n  const onLayout = (event: LayoutChangeEvent) => {\n    if (wasInitialized === false) {\n      const { width } = event.nativeEvent.layout;\n      setSliderWidth(width);\n      translateXtoValue.setValue(width - knobSize / 2);\n      setToValueOffset(width - knobSize / 2);\n      setWasInitialized(true);\n    }\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  const padding = useMemo(() => styleSize === 'large' ? 17 : styleSize === 'medium' ? 24 : 31, [styleSize]);\n\n  return (\n    <GestureHandlerRootView>\n      <Animated.View style={[styles.container, { opacity, padding }, customContainerStyle]}>\n        {\n          showValueLabels &&\n          <View style={{ width: '100%', height: 1, flexDirection }}>\n            <KnobBubble {...{ knobSize, valueLabelsBackgroundColor }}\n              translateX={translateXfromValue}\n              scale={fromValueScale}\n              textInputRef={fromValueTextRef}\n              textStyle={knobBubbleTextStyle}\n            />\n            <KnobBubble {...{ knobSize, valueLabelsBackgroundColor }}\n              translateX={translateXtoValue}\n              scale={toValueScale}\n              textInputRef={toValueTextRef}\n              textStyle={knobBubbleTextStyle}\n            />\n          </View>\n        }\n        <View style={{ width: '100%', height: knobSize, marginVertical: 4, position: 'relative', flexDirection, alignItems: 'center' }}>\n          <View style={{ position: 'absolute', backgroundColor: inRangeBarColor, left: knobSize / 4, marginLeft: -knobSize / 4, right: knobSize / 4, height: barHeight }} onLayout={onLayout} />\n          <Animated.View style={{ position: 'absolute', left: knobSize / 4, marginLeft: -knobSize / 4, right: knobSize / 4, height: barHeight, backgroundColor: outOfRangeBarColor, transform: [{ translateX: sliderWidth / 2 }, { scaleX: rightBarScaleX }, { translateX: -sliderWidth / 2 }] }} />\n          <Animated.View style={{ position: 'absolute', left: -knobSize / 4, width: knobSize / 2, height: barHeight, borderRadius: barHeight, backgroundColor: outOfRangeBarColor }} />\n          <Animated.View style={{ width: sliderWidth, height: barHeight, backgroundColor: outOfRangeBarColor, transform: [{ translateX: -sliderWidth / 2 }, { scaleX: leftBarScaleX }, { translateX: sliderWidth / 2 }] }} />\n          <Animated.View style={{ position: 'absolute', left: sliderWidth - knobSize / 4, width: knobSize / 2, height: barHeight, borderRadius: barHeight, backgroundColor: outOfRangeBarColor }} />\n          <PanGestureHandler onGestureEvent={onGestureEventFromValue} onHandlerStateChange={onHandlerStateChangeFromValue}>\n            <Animated.View style={[styles.knob, { height: knobSize, width: knobSize, borderRadius: knobSize, backgroundColor: fromKnobColor, elevation: fromElevation, transform: [{ translateX: translateXfromValue }] }]} />\n          </PanGestureHandler>\n          <PanGestureHandler onGestureEvent={onGestureEventToValue} onHandlerStateChange={onHandlerStateChangeToValue}>\n            <Animated.View style={[styles.knob, { height: knobSize, width: knobSize, borderRadius: knobSize, backgroundColor: toKnobColor, elevation: toElevation, transform: [{ translateX: translateXtoValue }] }]} />\n          </PanGestureHandler>\n        </View>\n        {\n          showRangeLabels &&\n          <View style={{ width: '100%', flexDirection, justifyContent: 'space-between' }}>\n            <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize }}>{min}</Text>\n            <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize }}>{max}</Text>\n          </View>\n        }\n      </Animated.View>\n    </GestureHandlerRootView>\n  );\n})\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 100,\n    width: '100%'\n  },\n  knob: {\n    position: 'absolute',\n    elevation: 4\n  }\n});\n\nexport default gestureHandlerRootHOC(RangeSlider);\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}